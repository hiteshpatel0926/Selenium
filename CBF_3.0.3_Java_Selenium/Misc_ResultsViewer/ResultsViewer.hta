<!DOCTYPE html>
  <head>
  <meta http-equiv="Content-type" content="text/html;charset=UTF-8">
  <title>Results Viewer</title>
  <HTA:APPLICATION
	  ID="oHTA"
		BORDER="Thin"
		CAPTION="yes"
		APPLICATIONNAME="Results Viewer"
		MAXIMIZEBUTTON="yes"
		MINIMIZEBUTTON="yes"
		SINGLEINSTANCE="no"
		SHOWINTASKBAR="yes"
		SYSMENU="yes"
		SCROLL="no"
		SELECTION="yes"
		WINDOWSTATE="maximize" /> 
 <link rel="stylesheet" href="../Dojo/dojo/resources/dojo.css">
  <link rel="stylesheet" href="../Dojo/dijit/themes/claro/claro.css">
  <link rel="stylesheet" href="../Dojo/gridx/resources/claro/Gridx.css">
	
  <style type="text/css">
    .gridx {
           width: 100%;
           height: 80%;
       }
	   #detailBox_underlay {
			background-color:grey;
		}
		#pass
		{
			color:green;
		}
		#fail
		{
			color:red;
		}
		#notCompleted
		{
			color:grey;
		}
		#testCaseExecuted
		{
			color:blue;
		}
    #setting
		{
			color:grey;
		}
		#tblOverview
		{
			font-size:12px;
		}
		
	.delRow tr{background-color:red !important;} 
  </style>
  <script src="http://code.jquery.com/jquery-1.9.1.min.js" ></script>
  <script type="text/javascript" src="../Dojo/dojo/dojo.js" data-dojo-config="isDebug: true, parseOnLoad: true"></script>
  <script type="text/javascript" src="./XmlReader.js"></script>
  <script type="text/javascript" src="./JsonUtils.js"></script>
  <script type="text/vbscript" src="./Utils.vbs"></script>

  <script type="text/javascript">
    var oXml,oTree,oSettings, screenShotPath;
    XML_READER.readXmlFile("Events.xml");
    oSettings = XML_READER.getSettings();
    oTree = XML_READER.getTree();
    aComponents = XML_READER.getComponents();
    require(["dojo/ready",
		"dijit/registry",
	  "dojo/dom-construct",
	  "dojo/dom",
		"dojo/parser",
		"dojo/_base/declare",
		"dojo/_base/event",
		"dojo/_base/lang",
		"gridx/allModules",
		"gridx/modules/select/Row",
		"gridx/Grid",
		"gridx/core/model/cache/Sync",
		"gridx/core/model/cache/Async",
		"dojo/store/Observable",
		"dojo/store/Memory",
	  "dijit/layout/ContentPane",
	  "dijit/layout/BorderContainer",
	  "dijit/layout/TabContainer",
	  "gridx/modules/SingleSort",
    "dojo/domReady!"],
    function(ready,registry, domConstruct, dom, parser, declare, event, lang, modules,Row, Grid, sync, async, Observable, 
            RequestMemory,ContentPane,BorderContainer,TabContainer,SingleSort){
      
		ready(function(){
		  //alert("Document is ready");
		});
	
	
	makeSummary();
	makeConfiguration();
    makeDetailsGrid();
    makeCoverage();		
	
    //Summary
    function makeSummary(){
		  var totalTestCaseExecuted= oTree.length;
		  var totalPass=0,totalFail=0,totalNC=0;
		  for(var i=0;i<totalTestCaseExecuted;i++){
			  if(oTree[i].eventData.ResultType.toLowerCase()=="passed")
				  totalPass++;
			  else if(oTree[i].eventData.ResultType.toLowerCase()=="failed")
				  totalFail++;
			  else
				  totalNC++;
		  }
      
		  var runName = oSettings.Run
      if(runName == undefined)
        runName = oSettings.ResultsRootFolder;
      var OverviewText="<h2>Summary</h2><table id='tblOverview'>" +
			  "<tr><td><div id='setting'><b>Run Name: </b>"+runName+"<div></td></tr>" +
			  "<tr><td><b><div id='setting'>Executed At: </b>"+oUTILS.FrmtDate(oSettings["ExecutionDate"])+"<div></br></tr>" +
			  "<tr rowspan='4'><td><h2>Execution Details</h2></br></td></tr>" +
			  "<tr><td><div id='testCaseExecuted'><b>Total Test Case Executed: </b>"+ totalTestCaseExecuted +"<div></td></tr>" +
			  "<tr><td><div id='pass'><b>Passed: </b>"+ totalPass +"</div></td></tr>" +
			  "<tr><td><div id='fail'><b>Failed: </b>"+ totalFail +"</div></td></tr>" +
			  "<tr><td><div id='notCompleted'><b>Not Completed: </b>"+ totalNC +"</div></td></tr>" +
			  "</table>";
      document.getElementById("tblOverview").innerHTML = OverviewText;
	   }
	
    function makeConfiguration(){
	    var i=1, parameterValue="";
		  for(var val in oSettings){
		  if(val.toLowerCase()=="eventtype")
	  		continue;
		  parameterValue = (oSettings[val]).toString().replace("","");
			if(val.toLowerCase().replace(" ","")=="executiondate")
				parameterValue = parameterValue ;
			var row = domConstruct.toDom("<tr><td>" + val + "</td><td>"+ parameterValue +"</td></tr>");
			domConstruct.place(row, "settingsBody");
		  }
    }
	
    function makeCoverage(){
      for(var comp in aComponents[0]){
        var row = "<tr><td width='10px'>" +comp+ "</td>";
        for(i=0; i<aComponents[0][comp].length; i++){
          var tdColor = getTdColor(aComponents[0][comp][i].occurrences);
          row = row + "<td bgcolor=" + tdColor + " width='10px' onmouseover='dispAxnName(this);' onclick='showOccurrences(this);'>" + aComponents[0][comp][i].occurrences.length + "</td>";
        }
        row = row + "</tr>";
        row = domConstruct.toDom(row);
        domConstruct.place(row, "coverage");
      }
    }

    function getTdColor(occurrences){
      var isFailed = "False";
	    if(occurrences.length==0) //Check for no occurences of the module
		    isFailed="NA";
        var tdColor;toJson
        for(var ix in occurrences){
          if(occurrences[ix].eventData.ResultType.toLowerCase() != "passed"){
            isFailed = "True";
            break;
          }
        }
      switch(isFailed){
        case "True": 
          tdColor = "OrangeRed";
          break;
        case "False":
          tdColor = "Lime";
          break;
        default: 
		  tdColor = "LightGrey";
		  break;  
      }
      return tdColor;
    }
    
	  function convertStatus(execStatus){
		  if(execStatus.toLowerCase()=="failed")
			  return "Failed";
		  return "Passed";
	  }

	  function extractValues(values){
		  for(var val in values){
			  var tempPropertyValue="";
			  if(typeof(values[val]) != "object"){
				  switch(val.toLowerCase()){
				  	case "resulttype":
					  	tempPropertyValue= convertStatus(values[val]);
					    break;
					  case "starttime":
					  case "finishtime":
						  var duration= values[val] - values["startTime"];
						  tempPropertyValue = values[val] + "',duration:'" + duration;
					    break;
					  default:
						  tempPropertyValue = values[val];
					    break;
				  }
				sXml = sXml +val+":" + "'"+tempPropertyValue+"',";
			  }
			  else{
			    if((val != "children") & (val != "parent"))
            if(val == "componentParameters"){
            sXml = sXml + "componentParameters:{"
            vals = "";
            for(var item in values[val]){
  				    vals = vals + item+":" + "'"+values[val][item]+"',";
            }
            sXml = sXml + vals + "},";
            sXml = sXml.replace(",}","}");
            }else{
              extractValues(values[val]);
            }
			  }
		  }
	  }
              
    function getChildNodeInfo(node) {
	    sXml = sXml + "{";
		  extractValues(node);
		  var iChildNodeSize = node.children.length;
		  if(iChildNodeSize != 0){
		    sXml = sXml + "children:[";
			  for (var i=0; i<iChildNodeSize; ++i){
			    getChildNodeInfo(node.children[i]);
	      }
	      sXml = sXml + "]},";
        sXml = sXml.replace("},]}","}]}");
        sXml = sXml.replace("},,{","},{");
      } else {
        sXml = sXml + "},";
        sXml = sXml.replace("},]}","}]}");
        sXml = sXml.replace("},,{","},{");
        sXml = sXml.replace(",}","}");
      }
    }
	
    var sXml;
    function getTreeStore(){
		
		var i=0;
		var obj = []; 
	    for(;i<oTree.length;i++){
		    obj.push(toJson(i).items[0]);		
	    }
		
	    return obj;
    } 
    function toJson(i){
		  sXml = "{ identifier: 'id', label: 'name',items: [";
		  getChildNodeInfo(oTree[i]);
		  sXml = sXml + "]}";
		  sXml = sXml.replace("},]}","}]}");
		  return eval("(" + sXml + ")");
    }
    
    function makeDetailsGrid(){
      columns = [
      {id: 'entityName', name: 'Name', field:'entityName', width: '550px'},
      {id: 'passed', name: 'Status', field:'ResultType',style: function(cell){ 
                if(cell.data() == 'Failed'){ 
                        return 'color: red'; 
                } 
                return 'color: green'; 
        }},
      {id: 'duration', name: 'Duration in Secs', field:'duration'}
      ];
      clientStore = new RequestMemory({data:getTreeStore(),
        getChildren: function(item) {
          return item.children;
        },
        hasChildren: function(id, item){
          return item && item.children && item.children.length;
        }
      });

      treeGrid = new Grid({
        cacheClass: sync,
		store: clientStore,
        structure: columns,
	      onRowClick:function(e){
	        if(e.srcElement.className.replace(/^\s+|\s+$/gm,'') != "gridxTreeExpandoIcon"){ //if(e.srcElement.cellIndex != undefined){
			      displayDetails(treeGrid.model.byId(e.rowId).item,e.srcElement.cellIndex);
          }
        },
        selectRowTriggerOnCell: true,
        modules: [modules.Tree, modules.VirtualVScroller, modules.ColumnResizer, Row]
       }, "gridTwo");
	 
	  treeGrid.startup();
      parser.parse();
    }
      
	  function getRows(rowsObj){
		  var strRow="";
		  for(var row in rowsObj)
			  strRow = strRow + "<tr><td><b>" + rowsObj[row][0] + "</b></td><td>" + rowsObj[row][1] + "</td></tr>";
	    return strRow;
	  }
	
    function displayDetails(details,col){
	    var DialogTitle="";
      var detailsTxt="<table width='90%'><col width='40%'><col width='60%'>"; 
	
      switch(details.entityType.toLowerCase()){
		  
		  case "testcase":
			  DialogTitle="<b>Test Case: " + details.entityName + " </b>";
			  switch(col){
				case undefined:
					var arrayForRows=[["Iteration Count:",details.iterationCount]];
					break;
				 case 1:
					var arrayForRows=[["TestCase Status:",details.ResultType],["No. of Iteration Passed:",details.passedCount],["No. of Iteration Failed:",(details.iterationCount-details.passedCount)]];
					break;
				 case 2:
					var arrayForRows=[["Start Time:",oUTILS.FrmtDate(details.startTime)],["Finish Time:",oUTILS.FrmtDate(details.finishTime)],["Duration:",details.duration + " seconds"]];
					break;
			  }
			  detailsTxt = detailsTxt + getRows(arrayForRows);
			  break;
			  
		  case "iteration":
			  DialogTitle="<b>Test Iteration: " + details.entityName + " </b>";
			  switch(col){
				case undefined:
					var arrayForRows=[["Step Count:",details.childcount]];	
					break;
				 case 1:
					var arrayForRows=[["TestIteration Status:",details.ResultType],["No. of Step Passed:",details.passedCount],["No. of Step Failed:",(details.childcount-details.passedCount)]];
					break;
				 case 2:
					var arrayForRows=[["Start Time:",oUTILS.FrmtDate(details.startTime)],["Finish Time:",oUTILS.FrmtDate(details.finishTime)],["Duration:",details.duration + " seconds"]];
					break;
			  }
			  detailsTxt = detailsTxt + getRows(arrayForRows);
			  break;
			  
		  case "teststep":
			  DialogTitle="<b>Test Step: " + details.entityName + " </b>";
			  switch(col){
				case undefined:
					var arrayForRows=[["Module Code:",details.moduleCode],["Component Code:",details.componentCode]];	
					detailsTxt = detailsTxt + getRows(arrayForRows);
					var start=false, isFirst=false; stepParameters="No parameter data Available";
					/*for(var parameter in details ){
						if(parameter=="componentCode"){
							start=true;
							isFirst= true;
							continue;
						}
						if(parameter=="componentOutputValidation"){
							break;
						}
						if(start){
							if(isFirst)
							{
								stepParameters="<table width='100%'>";
								isFirst=false;
							}
							stepParameters = stepParameters + "<tr valign='TOP'><td>"+ parameter+"  </td><td>"+ details[parameter]+"</td></tr>"
						}
					}*/
          stepParameters="<table width='100%'>";
          for(var param in details.componentParameters){
	          stepParameters = stepParameters + "<tr valign='TOP'><td>"+ param+"  </td><td>"+ details.componentParameters[param]+"</td></tr>"

          }
					stepParameters = stepParameters + "</table>";
					detailsTxt = detailsTxt + "<tr valign='TOP'><td><b>Parameters: </b></td><td>" + stepParameters + "</td></tr>" ;
				break;
				case 1:
					var arrayForRows=[["Test Step Status:",details.ResultType],["No. of Component Passed:",details.passedCount],["No. of Component Failed:",(parseInt(details.childcount) - details.passedCount)],["Fatal Count:",details.fatalCount]];
					detailsTxt = detailsTxt + getRows(arrayForRows);
					break;
				case 2:
					var arrayForRows=[["Start Time:",oUTILS.FrmtDate(details.startTime)],["Finish Time:",oUTILS.FrmtDate(details.finishTime)],["Duration:",details.duration + " seconds"]];
					detailsTxt = detailsTxt + getRows(arrayForRows);
					break;
			  }	
			  break;
			  
		  case "component":
			  DialogTitle="<b>Test Component: " + details.entityName + " </b>";
			  switch(col){
				case undefined:
					if(details.expected==undefined)
					  details.expected="N/A";
					if(details.actual==undefined)
					  details.actual="N/A";
					
					var arrayForRows=[["Expected Result:",details.expected],["Actual Result:",details.actual]];
					detailsTxt = detailsTxt + getRows(arrayForRows);
				  break;
				case 1:
					var arrayForRows=[["Test Component Status:",details.ResultType],["Fatal Count:",details.fatalCount]];
					detailsTxt = detailsTxt + getRows(arrayForRows);
					if(details.ResultType.toLowerCase()=="failed"){		
						screenShotPath = oSettings['ResultsFolder'] + "\\ScreenShots\\" + details.screenDumpName + ".png";
            //screenShotPath = "D:\\Demo\\Logs\\ScreenShots\\Check.png";
						detailsTxt = detailsTxt + 
									"<tr><td><b>Screendump path: </b></td><td><a href='#' onclick='loadPic();'>"+ screenShotPath +"</a></td></tr>";
					}
					break;
				case 2:
					var arrayForRows=[["Start Time:",oUTILS.FrmtDate(details.startTime)],["Finish Time:",oUTILS.FrmtDate(details.finishTime)],["Duration:",details.duration + " seconds"]];
					detailsTxt = detailsTxt + getRows(arrayForRows);
					break;
			  }
			  break;
	  }
	  detailsTxt = detailsTxt+ "</table>";
	  var detailBox = registry.byId("detailBox");
	  detailBox.set("title", DialogTitle);
	  detailBox.set("content", detailsTxt);
	  detailBox.set("style", "width: 500px");
	  detailBox.show();
    }
    //End of all function in require----
  
    });
  
    function loadPic(){ //FixMe: Physical existence of image may not be there
	    var o;
	    o = new ActiveXObject ("WScript.Shell");
	    o.Run (screenShotPath);
	    //o.Run ("C:\\Log\\ScreenDumps\\train.png");
    }

    function dispAxnName(e){
      var column_num = parseInt( $(e).index() );
      var row_num = parseInt( $(e).parent().index() ); 
      var comp = coverage.children[parseInt(row_num)].children[0].innerText; 
  	  dojo.byId("t_val").innerHTML = aComponents[0][comp][parseInt(column_num)-1].componentCode;
    }

    var treeGrid;
    function showOccurrences(e){
      var column_num = parseInt( $(e).index() );
      var row_num = parseInt( $(e).parent().index() ); 
      var comp = coverage.children[parseInt(row_num)].children[0].innerText;
	  
	  dojo.byId("modComponentName").innerHTML = aComponents[0][comp][parseInt(column_num)-1].moduleCode + "-" + aComponents[0][comp][parseInt(column_num)-1].componentCode;
	
      var occurrences = aComponents[0][comp][parseInt(column_num)-1].occurrences;
      makeOccurrencesGrid(occurrences);
    } 
    
    function makeOccurrencesGrid(items){
      require(["dijit/registry","dojo/store/Memory", "gridx/Grid", "dojo/Parser", "gridx/core/model/cache/Sync", 
              "gridx/allModules"], 
      function(registry, Memory, Grid, parser, sync, modules){ 
        var occurrences = [];   
        for(var evt in items){
          var item = {};
          item.id = items[evt].entity.id;
          item.Name = items[evt].parent.entity.entityName;
          item.Passed = items[evt].entity.eventData.ResultType;
          item.IterationName = items[evt].parent.parent.entity.entityName;
          item.TCName = items[evt].parent.parent.parent.entity.entityName;
          occurrences.push(item);
        }  
        columns = [
          {id: 'tcName', name: 'TC Name', field:'TCName'},
          {id: 'iterName', name: 'Iter Name', field:'IterationName'},
		      {id: 'Passed', name: 'Status', field:'Passed',style: function(cell){ 
            if(cell.data() == 'Failed'){ 
              return 'color: red'; 
            } 
              return 'color: green'; 
          }}
        ];
	  
        store = new Memory({data:{ identifier: 'id',items:occurrences},
          getChildren: function(item) {
            return item.children;
          },
          hasChildren: function(id, item){
            return item && item.children && item.children.length;
          }
        });

      var gridRegister = registry.byId('gridOccurrences'); 
		  if (gridRegister) {gridRegister.destroyRecursive(true); }
     
	    var grid = new Grid({
        cacheClass: sync,
        store: store,
	      paginationInitialPageSize: 10,
        structure: columns,
	      onRowClick:function(e){
          if(e.srcElement.cellIndex != undefined){
            selectTab("detailsTab");
              var node = treeGrid.model.byId(e.rowId).rawData;
              expandRow(node.id);
          }
        },
        modules:[
          modules.Pagination,
          modules.PaginationBar,
          modules.ColumnResizer,
		  modules.SingleSort
        ],
      
        selectRowTriggerOnCell: true
        }, "gridOccurrences");
	
	      grid.column("Passed").sort(false);	
        grid.startup();

        parser.parse();
      });
     }
     
    function expandRow(nodeId){
		  treeGrid.model.clearCache();
		  treeGrid.body.refresh();
      var treePath = treeGrid.model.treePath(nodeId);
	    treeGrid.tree.collapseRecursive(treePath[0],false);
	  
      //Expand every level (Note the first level is the root)
      for(var i = 1; i < treePath.length; ++i){
       treeGrid.tree.expand(treePath[i]);
      }

	    treeGrid.select.row.clear();
		  var childId = treeGrid.row(treePath[treePath.length-1]).rawData().children[0].id;
	
			//treeGrid.row(childId).node().style.backgroundColor = "#FF0000";
			
			row = treeGrid.model.byId(nodeId);
			var rowData = row.data;
			//var rowsssss= treeGrid.row(childId);
			var node = treeGrid.row(childId).node();
			var cells = dojo.query('.gridxCell', node);
			var cells1 = treeGrid.row(childId).cells();
			var color="";
			if(rowData["passed"] !== 'Passed')
				color = "#FF0000"; //red Color
			else
				color = "#00FF00"; //green Color
			var i =0;
			if(!(cells.length>3))
			{
				for(var j=0; j < treeGrid.structure.length; j++){
					cells[i+j].style.backgroundColor = color;
					cells[i+j].style.color = "#000000"; //Font in black
					cells[i+j].style.fontWeight = "bold";
					cells[i+j].style.fontVariant = "small-caps";
				}
			}
			
		  treeGrid.select.row.clear();
    }
    function selectTab(tabName) {
	    var container = dijit.byId("tabCont");
		  var tab = dijit.byId(tabName);
		  container.selectChild(tab);
	  }
  </script>
  <style type="text/css">
    html, body {
    width: 100%;
    height: 100%;
    margin: 0;
    overflow:hidden;
  }

  #borderContainerTwo {
    width: 100%;
    height: 100%;
  }
	</style>
  </head>
  <body class="claro">
  <div data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="gutters:true, liveSplitters:false" id="borderContainerTwo">
    <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'top', splitter:false">
      <table style="width:100%; height:100%">
			<colgroup>
				<col span="1" style="width: 15%;">
				<col span="1" style="width: 60%;">
				<col span="1" style="width: 25%;">
			</colgroup>
				<tr> 
					<td><img src="cbf.jpg" align="left"></td>
					<td><center><font size="5">Execution Results</font></center></td>
					<td><img src="igate.jpg" align="right"></td>
				</tr>
			</table>
    </div>
   <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'right', tabStrip:true">
	<div id="tblOverview">
		General Overview information comes here!
	</div>
   </div>
    <div data-dojo-type="dijit/layout/TabContainer" id="tabCont" data-dojo-props="region:'center', tabStrip:true" tabPosition="top">
       
			<div data-dojo-type="dijit/layout/ContentPane" title="Settings" id="settingsTab">
				<br/>
				<br/>
				<br/>
				<table border="1" width="80%">
					<thead>
						<tr><th><b>Name</b></th><th><b>VALUE</b></th></tr>
					</thead>
					<tbody id="settingsBody">
					</tbody>
				</table>
			</div>
			<div id="detailsTab" data-dojo-type="dijit/layout/ContentPane" title="Details" data-dojo-props="selected:true" >
			<br/><br/>
				<div id="gridTwo">
				</div>
			</div> 
      <div data-dojo-type="dijit/layout/ContentPane" title="Coverage" id="coverageTab">
				<br/>
				<table>
					<thead>
						<tr style="font-size:14px; font-variant: small-caps;"><th><b>Module</font></b></th><th width="20%"></th><th><b>Coverage</b></th></tr>
					</thead>
				</table>
				<table>
					<tbody id="coverage">
					</tbody>
				</table>
				<br/><br/>
				<label id="modComponentName" style="font-variant: small-caps;font-weight: bold;font-size:15px "></label>
				<br/>
				<div id="gridOccurrences">
				</div>
			</div>
			<div id="detailBox" title="Details Dialog Box" data-dojo-type="dijit/Dialog">
			</div>
		</div><!-- end TabContainer -->
	</div><!-- end BorderContainer -->
  <span id="t_val" data-dojo-type="dijit/Tooltip"
		  data-dojo-props='connectId:"coverage", selector: "td"'>
 </body>
 </html>


